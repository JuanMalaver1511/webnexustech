---
import Titles from "../titles/Titles.astro";
interface Props {
    title: string;
    content: string;
}

const { content, title } = Astro.props;
---
<section class="flex w-[95%] rounded-xl bg-blur_color_dark flex-col md:flex-col h-auto justify-between items-center p-6 shadow-lg shadow-black/50 card-container m-12 card opacity-0">
    <div class="flex flex-col items-center md:w-full ml-7 justify-center">
        <div class="flex items-baseline flex-wrap">
            <span class="md:text-[60px] text-[40px] text-text_color_hover">
                <Titles title={title} />
            </span>
        </div>

        <p class="text-[20px] md:text-xl text-text_color_hover mt-4">
            {content}
        </p>
    </div>
</section>

<style>
    .card-container {
        perspective: 1000px;
        transition: transform 0.5s, opacity 1s ease-out;
    }

    .card-container:hover {
        transform: rotateY(10deg);
    }

    .logo {
        position: relative;
        width: 80%;
        height: 80%;
        transition: transform 1s linear, opacity 0.3s linear;
    }

    @media (max-width: 950px) {
        .logo {
            transform: translateY(-100%);
            opacity: 0;
        }
    }

    .fade-in {
        opacity: 1;
        transform: translateY(0);
    }
</style>

<script>
    document.addEventListener('DOMContentLoaded', function() {
        const cards = document.querySelectorAll('.card');

        const observer = new IntersectionObserver((entries, observer) => {
            entries.forEach(entry => {
                if (entry.isIntersecting) {
                    entry.target.classList.add('fade-in');
                    observer.unobserve(entry.target);
                }
            });
        }, {
            threshold: 0.1
        });

        cards.forEach(card => {
            if (card instanceof HTMLElement) {
                observer.observe(card);

                card.addEventListener('mousemove', function(e) {
                    const event = e as MouseEvent;
                    const rect = card.getBoundingClientRect();
                    const xAxis = (event.clientX - rect.left - rect.width / 2) / 200;
                    const yAxis = (rect.top + rect.height / 2 - event.clientY) / 20;
                    card.style.transform = `perspective(800px) rotateX(${yAxis}deg) rotateY(${xAxis}deg)`;
                });

                card.addEventListener('mouseleave', function() {
                    card.style.transform = 'perspective(1000px) rotateX(0deg) rotateY(0deg)';
                });
            }
        });
    });
</script>
